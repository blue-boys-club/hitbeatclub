generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                     BigInt                @id @default(autoincrement())
  email                  String                @db.VarChar(255)
  name                   String?                @db.VarChar(100)
  stageName              String?                @db.VarChar(30)
  password               String?               @db.VarChar(255)
  phoneNumber            String?               @map("phone_number") @db.VarChar(20)
  gender                 String?               @db.Char(1)
  birthDate              DateTime?              @map("birth_date") @db.Timestamp(0)
  profileUrl             String?               @map("profile_url") @db.VarChar(255)
  country                String?                @db.VarChar(4)
  region                 String?                @db.VarChar(100)
  accessToken            String?               @map("access_token") @db.VarChar(255)
  refreshToken           String?               @map("refresh_token") @db.VarChar(255)
  agreedTermsAt          DateTime?              @map("agreed_terms_at") @db.Timestamp(0)
  agreedPrivacyPolicyAt  DateTime?              @map("agreed_privacy_policy_at") @db.Timestamp(0)
  agreedEmailAt          DateTime?             @map("agreed_email_at") @db.Timestamp(0)
  lastLoginAt            DateTime?             @map("last_login_at") @db.Timestamp(0)
  subscribedAt           DateTime?             @map("subscribed_at") @db.Timestamp(0)
  createdAt              DateTime?             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt              DateTime?             @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedReason          String?               @map("deleted_reason") @db.VarChar(255)
  deletedAt              DateTime?             @map("deleted_at") @db.Timestamp(0)
  musicType              String?               @db.VarChar(10)
  artist                 Artist[]
  file                   File[]
  cart                   Cart[]
  order                  Order[]
  userSocialAccount      UserSocialAccount[]
  tag                    Tag[]
  accountToken           AccountToken[]
  productLike            ProductLike[]
  userArtistFollow       UserArtistFollow[]
  userArtistBlock        UserArtistBlock[]
  subscribe              Subscribe[]
  playlist               Playlist[]
  playedTracks           PlayedTracks[]
  notification           Notification[]
  playlistLog            PlaylistLog[]

  @@map("user")
}

model Artist {
  id                         BigInt    @id @default(autoincrement())
  userId                     BigInt    @map("user_id")
  stageName                  String?   @map("stage_name") @db.VarChar(30)
  slug                       String?   @db.VarChar(20)
  viewCount                  BigInt?   @map("view_count") @db.UnsignedBigInt
  description                String?   @db.Text
  isVerified                 Int?      @map("is_verified") @db.TinyInt 
  profileImageUrl            String?   @map("profile_image_url") @db.VarChar(255)
  instagramAccount           String?   @map("instagram_account") @db.VarChar(30)
  youtubeAccount             String?   @map("youtube_account") @db.VarChar(30)
  tiktokAccount              String?   @map("tiktok_account") @db.VarChar(30)
  soundcloudAccount          String?   @map("soundcloud_account") @db.VarChar(30)
  etcAccounts                Json?     @map("etc_accounts")
  kakaoAccount               String?   @map("kakao_account") @db.VarChar(30)
  lineAccount                String?   @map("line_account") @db.VarChar(30)
  discordAccount             String?   @map("discord_account") @db.VarChar(30)
  country                    String?   @db.VarChar(3)
  city                       String?   @db.VarChar(100)
  createdAt                  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                  DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                  DateTime? @map("deleted_at") @db.Timestamp(0)
  user                       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_artist_1")
  productSellerIdToArtist    Product[] @relation("product_seller_idToartist")
  settlement Settlement[]
  userArtistFollow           UserArtistFollow[]
  userArtistBlock            UserArtistBlock[]
  artistReport               ArtistReport[]
  orderItems                 OrderItem[]
  playlistLog                PlaylistLog[]
  
  @@unique([slug, deletedAt], map: "ux_artist_slug")
  @@index([userId], map: "FK_user_TO_artist_1")
  @@map("artist")
}

model Cart {
  id        BigInt    @id @default(autoincrement())
  productId BigInt    @map("product_id")
  licenseId BigInt    @map("license_id")
  userId    BigInt    @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_1")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_3")
  license   License   @relation(fields: [licenseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_2")

  @@index([productId], map: "FK_product_TO_cart_1")
  @@index([userId], map: "FK_product_TO_cart_3")
  @@index([licenseId], map: "FK_product_TO_cart_2")
  @@map("cart")
}

model Order {
  id               BigInt        @id @default(autoincrement())
  uuid             String        @unique @default(uuid()) @db.VarChar(36)
  buyerId          BigInt        @map("buyer_id")
  orderNumber      String?       @unique @map("order_number") @db.VarChar(100)
  orderName        String?       @map("order_name") @db.VarChar(255)
  totalPrice       Int?          @map("total_price")
  totalAmount      Int?          @map("total_amount")
  status           OrderStatus   @default(INITIATE)
  paymentId        String?       @map("payment_id") @db.VarChar(255)
  paymentMethod    String?       @map("payment_method") @db.VarChar(50)
  pgTransactionId  String?       @map("pg_transaction_id") @db.VarChar(255)
  paidAt           DateTime?     @map("paid_at") @db.Timestamp(0)
  cancelledAt      DateTime?     @map("cancelled_at") @db.Timestamp(0)
  cancelledAmount  Int?          @map("cancelled_amount")
  createdAt        DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt        DateTime?     @map("deleted_at") @db.Timestamp(0)
  user             User          @relation(fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_order_1")
  orderItems       OrderItem[]

  @@index([buyerId], map: "FK_user_TO_order_1")
  @@index([paymentId], map: "idx_order_payment_id")
  @@index([uuid], map: "idx_order_uuid")
  @@index([orderNumber], map: "idx_order_number")
  @@map("order")
}

model OrderItem {
  id          BigInt    @id @default(autoincrement())
  orderId     BigInt    @map("order_id")
  productId   BigInt    @map("product_id")
  sellerId    BigInt?    @map("seller_id")
  licenseId   BigInt    @map("license_id")
  productName String    @map("product_name") @db.VarChar(255)
  price       Int
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)
  order       Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_order_item_1")
  product     Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_order_item_1")
  license     License   @relation(fields: [licenseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_license_TO_order_item_1")
  artist      Artist?    @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_artist_TO_order_item_1")

  @@index([sellerId], map: "FK_artist_TO_order_item_1")
  @@index([orderId], map: "FK_order_TO_order_item_1")
  @@index([productId], map: "FK_product_TO_order_item_1")
  @@index([licenseId], map: "FK_license_TO_order_item_1")
  @@map("order_item")
}


model Product {
  id                        BigInt    @id @default(autoincrement())
  sellerId                  BigInt?    @map("seller_id") 
  productName               String?   @map("product_name") @db.VarChar(255)
  description               String?   @db.Text
  imageUrl                  String?   @map("image_url") @db.VarChar(255)
  category                  String?   @db.VarChar(10)
  minBpm                    Int?      @db.SmallInt
  maxBpm                    Int?      @db.SmallInt
  musicKey                  String?   @db.VarChar(10)
  scaleType                 String?   @db.VarChar(10)
  currency                  String?   @db.VarChar(10)
  isFreeDownload            Int?      @map("is_free_download") @db.TinyInt
  isPublic                  Int?      @map("is_public") @db.TinyInt
  viewCount                 BigInt?   @map("view_count") @db.UnsignedBigInt
  createdAt                 DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                 DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                 DateTime? @map("deleted_at") @db.Timestamp(0)
  cart                      Cart[]
  artistSellerIdToArtist    Artist?          @relation("product_seller_idToartist", fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_artist_TO_product_1")
  productLicense            ProductLicense[]
  productGenre              ProductGenre[]
  productTag                ProductTag[]
  productLike               ProductLike[]
  orderItems                OrderItem[]
  playlistLog               PlaylistLog[]

  @@index([sellerId], map: "FK_artist_TO_product_1")
  @@map("product")
}

model UserSocialAccount {
  id             BigInt    @id @default(autoincrement())
  userId         BigInt    @map("user_id")
  provider       String    @db.VarChar(20)
  providerUserId BigInt    @map("provider_user_id")
  email          String?   @db.VarChar(255)
  profileImage   String?   @map("profile_image") @db.VarChar(255)
  name           String?   @db.VarChar(100)
  accessToken    String    @map("access_token") @db.VarChar(255)
  refreshToken   String    @map("refresh_token") @db.VarChar(255)
  connectedAt    DateTime  @map("connected_at") @db.Timestamp(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(0)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_user_social_account_1")

  @@index([userId], map: "FK_user_TO_user_social_account_1")
  @@map("user_social_account")
}

model File {
  id          BigInt    @id @default(autoincrement())
  targetTable String?   @map("target_table") @db.VarChar(20)
  targetId    BigInt?   @map("target_id")
  type        String?   @db.VarChar(20)
  url         String?   @db.VarChar(255)
  originName  String    @map("origin_name") @db.VarChar(100)
  mimeType    String?   @map("mime_type") @db.VarChar(50)
  size        BigInt    @default(0) @db.UnsignedBigInt
  uploaderId  BigInt?   @map("uploader_id")
  isEnabled   Int       @map("is_enabled") @db.TinyInt
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)
  user        User?     @relation(fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_uploader")

  @@index([uploaderId], map: "idx_file_uploader")
  @@index([targetId], map: "idx_file_target")
  @@map("file")
}

model License {
  id             BigInt           @id @default(autoincrement())
  type           String?           @db.VarChar(100)
  label          String?           @db.VarChar(100)
  createdAt      DateTime?        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime?        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp(0)
  productLicense ProductLicense[]
  cart           Cart[]
  orderItems     OrderItem[]
  
  @@map("license")
}

model ProductLicense {
  productId BigInt    @map("product_id")
  licenseId BigInt    @map("license_id")
  price     Int?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_license_1")
  license   License   @relation(fields: [licenseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_license_TO_product_license_1")

  @@id([productId, licenseId])
  @@index([productId], map: "FK_product_TO_product_license_1")
  @@index([licenseId], map: "FK_license_TO_product_license_1")
  @@map("product_license")
}

model Genre {
  id           BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(100)
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt    DateTime?      @map("deleted_at") @db.Timestamp(0)
  productGenre ProductGenre[]

  @@map("genre")
}

model ProductGenre {
  productId BigInt    @map("product_id")
  genreId   BigInt    @map("genre_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_genre_1")
  genre     Genre     @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_genre_TO_product_genre_1")

  @@unique([productId, genreId])
  @@index([productId], map: "FK_product_TO_product_genre_1")
  @@index([genreId], map: "FK_genre_TO_product_genre_1")
  @@map("product_genre")
}

model Tag {
  id         BigInt       @id @default(autoincrement())
  name       String       @db.VarChar(100)
  userId     BigInt?       @map("user_id")
  createdAt  DateTime?    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime?    @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt  DateTime?    @map("deleted_at") @db.Timestamp(0)
  productTag ProductTag[]
  user       User?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_tag_1")

  @@index([userId], map: "FK_user_TO_tag_1")
  @@map("tag")
}

model ProductTag {
  productId BigInt    @map("product_id")
  tagId     BigInt    @map("tag_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_tag_1")
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_tag_TO_product_tag_1")

  @@unique([productId, tagId])
  @@index([productId], map: "FK_product_TO_product_tag_1")
  @@index([tagId], map: "FK_tag_TO_product_tag_1")
  @@map("product_tag")
}

model ProductLike {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  productId BigInt   @map("product_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0) 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_user_TO_product_like_1")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "FK_product_TO_product_like_1")

  @@unique([userId, productId, deletedAt], map: "ux_product_like__user_product")
  @@index([userId], map: "FK_user_TO_product_like_1")
  @@index([productId], map: "FK_product_TO_product_like_1")
  @@map("product_like")
}

enum SettlementType {
  BANK_ACCOUNT
  PAYPAL
}

model Settlement {
  id BigInt @id @default(autoincrement())
  artistId BigInt @unique @map("artist_id")

  type SettlementType
  // 입금주 명 - bankAccount, paypal 이랑 같이 사용
  accountHolder String @map("account_name") @db.VarChar(100)

  accountNumber String? @map("account_number") @db.VarChar(100)
  accountBank String? @map("account_bank") @db.VarChar(100)
  accountVerifiedAt DateTime? @map("account_verified_at") @db.Timestamp(0)

  paypalAccount String? @map("paypal_account") @db.VarChar(100)

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_artist_TO_settlement_1")

  @@index([artistId], map: "FK_artist_TO_settlement_1")
  @@map("settlement")
}

enum TokenPurpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
  PHONE_VERIFICATION
  PHONE_CHANGE
}

enum FollowStatus {
  active
  blocked
}

enum SubscriptionPlan {
  MONTH
  YEAR
}

enum ProductType {
  MEMBERSHIP
}

enum OrderStatus {
  INITIATE
  PENDING
  COMPLETED
  WAITING_FOR_DEPOSIT
  CANCELLED
  PARTIAL_CANCELLED
}

enum SubscribeStatus {
  ACTIVE
  CANCELED
}

model AccountToken {
  id          BigInt   @id @default(autoincrement())
  token       String   @db.Char(64) @unique      // SHA-256 → 64byte 등
  purpose     TokenPurpose

  userId      BigInt   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  active      Boolean?  @default(true)            // "현재 유효 토큰인가?"
  consumedAt  DateTime? @map("consumed_at")      // 검증 직후 기록
  expiresAt   DateTime  @map("expires_at")

  deletedAt   DateTime? @map("deleted_at")       // 소프트 삭제 시각
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([userId, purpose, active])            // active=true일 때만 unique (null은 무시됨)
  @@index([expiresAt])
  @@index([deletedAt])
  @@map("account_token")
}

model UserArtistFollow {
  id        BigInt       @id @default(autoincrement())
  userId    BigInt       @map("user_id")
  artistId  BigInt       @map("artist_id")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime?    @map("deleted_at") @db.Timestamp(0)
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uaf_user")
  artist    Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uaf_artist")

  @@unique([userId, artistId, deletedAt], map: "ux_user_artist_follow__user_artist_deleted")
  @@index([userId], map: "idx_uaf_user")
  @@index([artistId], map: "idx_uaf_artist")
  @@map("user_artist_follow")
}

model UserArtistBlock {
  id        BigInt       @id @default(autoincrement())
  userId    BigInt       @map("user_id")
  artistId  BigInt       @map("artist_id")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime?    @map("deleted_at") @db.Timestamp(0)
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uab_user")
  artist    Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uab_artist")

  @@unique([userId, artistId, deletedAt], map: "ux_user_artist_block__user_artist_deleted")
  @@index([userId], map: "idx_uab_user")
  @@index([artistId], map: "idx_uab_artist")
  @@map("user_artist_block")
}

model Subscribe {
  id               BigInt          @id @default(autoincrement())
  userId           BigInt          @map("user_id")
  couponId         BigInt?         @map("coupon_id")
  subscriptionPlan SubscriptionPlan @map("subscription_plan")
  productType      ProductType     @map("product_type")
  price           Int             @db.Int
  nextPaymentDate  DateTime?       @map("next_payment_date") @db.Timestamp(0)
  status           SubscribeStatus @default(ACTIVE)
  cancelledAt      DateTime?       @map("cancelled_at") @db.Timestamp(0)
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt        DateTime?       @map("deleted_at") @db.Timestamp(0)
  
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_user_TO_subscribe_1")
  coupon           Coupon?         @relation(fields: [couponId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_coupon_TO_subscribe_1")
  subscribeBilling SubscribeBilling[] @relation("FK_subscribe_TO_billing_1")
  subscribeTransactions SubscribeTransaction[] @relation("FK_subscribe_TO_transaction_1")

  @@index([userId], map: "FK_user_TO_subscribe_1")
  @@index([couponId], map: "FK_coupon_TO_subscribe_1")
  @@map("subscribe")
}

model SubscribeProduct {
  id            BigInt          @id @default(autoincrement())
  type          SubscriptionPlan @map("type")
  price Int             @map("original_price") @db.Int
  discountPrice Int?            @map("discount_price") @db.Int
  discountRate  Int?            @map("discount_rate") @db.TinyInt
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp(0)

  @@map("subscribe_product")
}

model Coupon {
  id            BigInt             @id @default(autoincrement())
  code          String             @unique @db.VarChar(50)
  name          String             @db.VarChar(100)
  discountPrice Int?               @map("discount_price") @db.Int // 할인 금액
  freeMonth Int?               @map("free_month") @db.Int // 무료 개월 수
  validFromAt   DateTime           @map("valid_from_at") @db.Timestamp(0) // 유효 시작일
  validUntilAt  DateTime           @map("valid_until_at") @db.Timestamp(0) // 유효 종료일
  usageLimit    Int?               @map("usage_limit") @db.Int // 사용 가능 횟수
  usedCount     Int                @default(0) @map("used_count") @db.Int // 사용 횟수
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime           @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?          @map("deleted_at") @db.Timestamp(0)
  
  subscribe     Subscribe[]

  @@map("coupon")
}

model Notice {
  id          BigInt    @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  viewCount   BigInt    @default(0) @map("view_count") @db.UnsignedBigInt
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)

  @@map("notice")
}

model ArtistReport {
  id                   BigInt      @id @default(autoincrement())
  artistId             BigInt      @map("artist_id")
  reporterName         String      @map("reporter_name") @db.VarChar(100) // 
  reporterPhone        String      @map("reporter_phone") @db.VarChar(20)
  reporterEmail        String      @map("reporter_email") @db.VarChar(255)
  content              String      @db.Text
  agreedPrivacyPolicy  Boolean     @map("agreed_privacy_policy")
  adminNote            String?     @map("admin_note") @db.Text
  processedAt          DateTime?   @map("processed_at") @db.Timestamp(0)
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime    @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt            DateTime?   @map("deleted_at") @db.Timestamp(0)
  
  artist               Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_artist_TO_report_1")

  @@index([artistId], map: "FK_artist_TO_report_1")
  @@map("artist_report")
}

enum PlaylistSourceContext {
  MAIN
  SEARCH
  ARTIST
  FOLLOWING
  LIKED
  CART
  MANUAL
}

model Playlist {
  id            BigInt                @id @default(autoincrement())
  userId        BigInt                @map("user_id")

  /// 최대 100곡의 트랙 ID 배열
  trackIds      Json?                 @map("track_ids")

  /// 현재 재생 인덱스
  currentIndex  Int?                  @map("current_index")

  /// 재생목록 생성 컨텍스트
  sourceContext PlaylistSourceContext @default(MAIN) @map("source_context")
  /// 컨텍스트 상세(JSON) ─ 예) {"keyword":"IU","page":1}
  contextData   Json?                 @map("context_data")

  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?             @map("deleted_at") @db.Timestamp(0)

  /// ───────── 관계 ─────────
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  playedTracks  PlayedTracks[]

  @@index([userId], map: "FK_user_TO_playlist_1")
  @@map("playlist")
}

model PlayedTracks {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  trackIds  Json?    @map("track_ids")
  playlistId BigInt   @map("playlist_id")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@map("played_tracks")
}

model Question {
  id        BigInt    @id @default(autoincrement())
  title     String    @db.VarChar(255)
  content   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)

  @@map("question")
}

model Inquiry {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(100)
  email       String    @db.VarChar(255)
  phoneNumber String?   @map("phone_number") @db.VarChar(20)
  content     String    @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)

  @@index([createdAt], map: "idx_inquiry_created")
  @@map("inquiry")
}

// Add TransactionStatus enum for subscription payment attempts
enum TransactionStatus {
  INITIATED
  PENDING
  SUCCEEDED
  FAILED
}

// Add BillingKeyStatus enum and status field to SubscribeBilling model
enum BillingKeyStatus {
  READY
  ISSUED
  FAILED
  DELETED
}

// 빌링키 저장 테이블 - 정기 구독 결제용
model SubscribeBilling {
  id          BigInt  @id @default(autoincrement())
  subscribeId BigInt  @map("subscribe_id")
  billingKey  String  @map("billing_key") @db.VarChar(255)
  pg          String? @db.VarChar(20)
  status      BillingKeyStatus @default(ISSUED)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)

  subscribe   Subscribe @relation("FK_subscribe_TO_billing_1", fields: [subscribeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([subscribeId], map: "idx_billing_subscribe_id")
  @@map("subscribe_billing")
}

// 구독 결제 시도 내역 테이블
model SubscribeTransaction {
  id            BigInt          @id @default(autoincrement())
  subscribeId   BigInt          @map("subscribe_id")
  paymentId     String?         @map("payment_id") @db.VarChar(255)
  amount        Int
  status        TransactionStatus
  attemptedAt   DateTime        @map("attempted_at") @db.Timestamp(0)
  succeededAt   DateTime?       @map("succeeded_at") @db.Timestamp(0)
  failedAt      DateTime?       @map("failed_at") @db.Timestamp(0)
  pgTxId        String?         @map("pg_tx_id") @db.VarChar(255)
  failReason    String?         @map("fail_reason") @db.VarChar(255)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp(0)

  subscribe     Subscribe       @relation("FK_subscribe_TO_transaction_1", fields: [subscribeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([subscribeId], map: "idx_transaction_subscribe_id")
  @@map("subscribe_transaction")
}

model Notification {
  id        BigInt    @id @default(autoincrement())
  receiverId      BigInt?    @map("receiver_id")
  senderId  BigInt?   @map("sender_id")
  type      String    @db.VarChar(50)
  title     String    @db.VarChar(255)
  content   String    @db.Text
  isRead    Boolean   @default(false) @map("is_read")
  readAt    DateTime? @map("read_at") @db.Timestamp(0)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  
  user      User?      @relation(fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_user_TO_notification_1")

  @@index([receiverId], map: "FK_user_TO_notification_1")
  @@index([receiverId, isRead], map: "idx_notification_user_read")
  @@index([createdAt], map: "idx_notification_created")
  @@map("notification")
}

model PlaylistLog {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt    @map("user_id")
  sellerId  BigInt    @map("seller_id")
  productId BigInt    @map("product_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_user_TO_playlist_log_1")
  seller    Artist    @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_artist_TO_playlist_log_1")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_product_TO_playlist_log_1")

  @@unique([userId, createdAt], map: "ux_playlist_log_user_created")
  @@index([userId], map: "FK_user_TO_playlist_log_1")
  @@index([sellerId], map: "FK_artist_TO_playlist_log_1")
  @@index([productId], map: "FK_product_TO_playlist_log_1")
  @@index([createdAt], map: "idx_playlist_log_created")
  @@map("playlist_log")
}

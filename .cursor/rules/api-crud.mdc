---
description: 
globs: 
alwaysApply: false
---
# API CRUD 모듈 생성 가이드

이 문서는 NestJS API에서 CRUD 모듈을 생성하는 표준 절차를 정의합니다.

## 1. Prisma 스키마 추가

### 파일 경로
- `apps/api/prisma/schema.prisma`

### 모델 구조
```prisma
model {ModelName} {
  id        BigInt    @id @default(autoincrement())
  // 모듈별 고유 필드들
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)

  // 인덱스 추가 (필요한 경우)
  @@index([createdAt], map: "idx_{table_name}_created")
  @@map("{table_name}")
}
```

### 공통 필드
- `id`: BigInt 자동증가 기본키
- `createdAt`: 생성일시 (기본값: now())
- `updatedAt`: 수정일시 (기본값: now())
- `deletedAt`: 삭제일시 (소프트 삭제용, nullable)

## 2. Shared Types 생성

### 2.1 Request 스키마
**파일 경로**: `packages/shared-types/src/{module}/{module}.request.ts`

```typescript
import { z } from "zod";

export const {ModuleName}CreateSchema = z.object({
	// 필드 정의
});

export const {ModuleName}UpdateSchema = z.object({
	// 필드 정의 (optional)
});

export type {ModuleName}CreateRequest = z.infer<typeof {ModuleName}CreateSchema>;
export type {ModuleName}UpdateRequest = z.infer<typeof {ModuleName}UpdateSchema>;
```

### 2.2 Response 스키마
**파일 경로**: `packages/shared-types/src/{module}/{module}.response.ts`

```typescript
import { z } from "zod";

export const {ModuleName}ResponseSchema = z.object({
	id: z.number().describe("ID"),
	// 필드 정의
	createdAt: z.string().datetime().describe("생성 일시"),
	updatedAt: z.string().datetime().describe("수정 일시"),
});

export const {ModuleName}ListResponseSchema = z.array({ModuleName}ResponseSchema);
export const {ModuleName}DetailResponseSchema = {ModuleName}ResponseSchema;

export type {ModuleName}Response = z.infer<typeof {ModuleName}ResponseSchema>;
export type {ModuleName}ListResponse = z.infer<typeof {ModuleName}ListResponseSchema>;
export type {ModuleName}DetailResponse = z.infer<typeof {ModuleName}DetailResponseSchema>;
```

### 2.3 Index 파일
**파일 경로**: `packages/shared-types/src/{module}/index.ts`

```typescript
export * from "./{module}.request";
export * from "./{module}.response";
```

### 2.4 메인 Export 추가
- `packages/shared-types/src/index.ts`에 `export * from "./{module}";` 추가
- `packages/shared-types/tsup.config.ts`에 `"{module}/index": "src/{module}/index.ts"` 추가

### 2.5 빌드
```bash
cd packages/shared-types && pnpm build
```

## 3. API 모듈 생성

### 3.1 Error 파일 생성
**파일 경로**: `apps/api/src/modules/{module}/{module}.error.ts`

```typescript
export const {MODULE_NAME}_CREATE_ERROR = {
	title: "{ModuleName} create error",
	code: 17xx,
	status: 400,
	detail: "{모듈명} 생성에 실패했습니다.",
};

export const {MODULE_NAME}_FIND_ERROR = {
	title: "{ModuleName} find error",
	code: 17xx,
	status: 400,
	detail: "{모듈명} 목록 조회에 실패했습니다.",
};

export const {MODULE_NAME}_NOT_FOUND_ERROR = {
	title: "{ModuleName} not found",
	code: 17xx,
	status: 404,
	detail: "{모듈명}을 찾을 수 없습니다.",
};

export const {MODULE_NAME}_DETAIL_ERROR = {
	title: "{ModuleName} detail error",
	code: 17xx,
	status: 400,
	detail: "{모듈명} 상세 조회에 실패했습니다.",
};

export const {MODULE_NAME}_UPDATE_ERROR = {
	title: "{ModuleName} update error",
	code: 17xx,
	status: 400,
	detail: "{모듈명} 수정에 실패했습니다.",
};

export const {MODULE_NAME}_DELETE_ERROR = {
	title: "{ModuleName} delete error",
	code: 17xx,
	status: 400,
	detail: "{모듈명} 삭제에 실패했습니다.",
};
```

### 3.2 DTO 생성

#### Request DTO
**파일 경로**: `apps/api/src/modules/{module}/dto/request/{module}.create.dto.ts`

```typescript
import { createZodDto } from "nestjs-zod";
import { {ModuleName}CreateSchema } from "@hitbeatclub/shared-types";

export class {ModuleName}CreateDto extends createZodDto({ModuleName}CreateSchema) {}
```

**파일 경로**: `apps/api/src/modules/{module}/dto/request/{module}.update.dto.ts`

```typescript
import { createZodDto } from "nestjs-zod";
import { {ModuleName}UpdateSchema } from "@hitbeatclub/shared-types";

export class {ModuleName}UpdateDto extends createZodDto({ModuleName}UpdateSchema) {}
```

#### Response DTO
**파일 경로**: `apps/api/src/modules/{module}/dto/response/{module}.list.response.dto.ts`

```typescript
import { createZodDto } from "nestjs-zod";
import { {ModuleName}ListResponseSchema } from "@hitbeatclub/shared-types";

export class {ModuleName}ListResponseDto extends createZodDto({ModuleName}ListResponseSchema) {}
```

**파일 경로**: `apps/api/src/modules/{module}/dto/response/{module}.detail.response.dto.ts`

```typescript
import { createZodDto } from "nestjs-zod";
import { {ModuleName}DetailResponseSchema } from "@hitbeatclub/shared-types/{module}";

export class {ModuleName}DetailResponseDto extends createZodDto({ModuleName}DetailResponseSchema) {}
```

### 3.3 Service 생성
**파일 경로**: `apps/api/src/modules/{module}/{module}.service.ts`

```typescript
import { Injectable, BadRequestException, NotFoundException, Logger } from "@nestjs/common";
import { PrismaService } from "~/common/prisma/prisma.service";
import { {ModuleName}CreateDto } from "./dto/request/{module}.create.dto";
import { {ModuleName}UpdateDto } from "./dto/request/{module}.update.dto";
import {
	{MODULE_NAME}_CREATE_ERROR,
	{MODULE_NAME}_FIND_ERROR,
	{MODULE_NAME}_NOT_FOUND_ERROR,
	{MODULE_NAME}_DETAIL_ERROR,
	{MODULE_NAME}_UPDATE_ERROR,
	{MODULE_NAME}_DELETE_ERROR,
} from "./{module}.error";

@Injectable()
export class {ModuleName}Service {
	private readonly logger = new Logger({ModuleName}Service.name);

	constructor(private readonly prisma: PrismaService) {}

	async create(create{ModuleName}Dto: {ModuleName}CreateDto) {
		try {
			// 생성 로직
		} catch (error) {
			this.logger.error("Error creating {module}:", error);
			throw new BadRequestException({ ...{MODULE_NAME}_CREATE_ERROR, detail: error.message });
		}
	}

	async findAll() {
		try {
			// 목록 조회 로직
		} catch (error) {
			this.logger.error("Error finding {modules}:", error);
			throw new BadRequestException({ ...{MODULE_NAME}_FIND_ERROR, detail: error.message });
		}
	}

	async findOne(id: number) {
		try {
			// 상세 조회 로직
			if (!{module}) {
				throw new NotFoundException({MODULE_NAME}_NOT_FOUND_ERROR);
			}
		} catch (error) {
			this.logger.error("Error finding {module}:", error);
			if (error instanceof NotFoundException) {
				throw error;
			}
			throw new BadRequestException({ ...{MODULE_NAME}_DETAIL_ERROR, detail: error.message });
		}
	}

	async update(id: number, update{ModuleName}Dto: {ModuleName}UpdateDto) {
		try {
			// 수정 로직
			if (!existing{ModuleName}) {
				throw new NotFoundException({MODULE_NAME}_NOT_FOUND_ERROR);
			}
		} catch (error) {
			this.logger.error("Error updating {module}:", error);
			if (error instanceof NotFoundException) {
				throw error;
			}
			throw new BadRequestException({ ...{MODULE_NAME}_UPDATE_ERROR, detail: error.message });
		}
	}

	async softDelete(id: number) {
		try {
			// 삭제 로직
			if (!existing{ModuleName}) {
				throw new NotFoundException({MODULE_NAME}_NOT_FOUND_ERROR);
			}
		} catch (error) {
			this.logger.error("Error deleting {module}:", error);
			if (error instanceof NotFoundException) {
				throw error;
			}
			throw new BadRequestException({ ...{MODULE_NAME}_DELETE_ERROR, detail: error.message });
		}
	}
}
```

### 3.4 Controller 생성
**파일 경로**: `apps/api/src/modules/{module}/{module}.public.controller.ts`

```typescript
import {
	Controller,
	Get,
	Post,
	Patch,
	Delete,
	Param,
	Body,
	Logger,
} from "@nestjs/common";
import { {ModuleName}Service } from "./{module}.service";
import { ApiOperation, ApiTags, ApiBearerAuth } from "@nestjs/swagger";
import { DocResponse } from "~/common/doc/decorators/doc.decorator";
import { IResponse } from "~/common/response/interfaces/response.interface";
import { DatabaseIdResponseDto } from "~/common/response/dtos/response.dto";

@Controller("{modules}")
@ApiTags("{module}")
@ApiBearerAuth()
export class {ModuleName}PublicController {
	private readonly logger = new Logger({ModuleName}PublicController.name);

	constructor(private readonly {module}Service: {ModuleName}Service) {}

	@Post()
	@ApiOperation({ summary: "{모듈명} 생성" })
	async create() {
		// POST 로직
	}

	@Get()
	@ApiOperation({ summary: "{모듈명} 목록 조회" })
	async findAll() {
		// GET 로직
	}

	@Get(":id")
	@ApiOperation({ summary: "{모듈명} 상세 조회" })
	async findOne(@Param("id") id: number) {
		// GET :id 로직
	}

	@Patch(":id")
	@ApiOperation({ summary: "{모듈명} 수정" })
	async update(@Param("id") id: number) {
		// PATCH :id 로직
	}

	@Delete(":id")
	@ApiOperation({ summary: "{모듈명} 삭제" })
	async remove(@Param("id") id: number) {
		// DELETE :id 로직
	}
}
```

### 3.5 Module 생성
**파일 경로**: `apps/api/src/modules/{module}/{module}.module.ts`

```typescript
import { Module } from "@nestjs/common";
import { {ModuleName}Service } from "./{module}.service";
import { {ModuleName}PublicController } from "./{module}.public.controller";

@Module({
	controllers: [{ModuleName}PublicController],
	providers: [{ModuleName}Service],
	exports: [{ModuleName}Service],
})
export class {ModuleName}Module {}
```

## 4. Router 등록

### 적절한 Router 파일에 추가
- `apps/api/src/router/routes/routes.public.module.ts` (퍼블릭 API용)
- `apps/api/src/router/routes/routes.user.module.ts` (인증 필요한 API용)

```typescript
import { {ModuleName}Module } from "~/modules/{module}/{module}.module";

@Module({
	// ...
	imports: [..., {ModuleName}Module],
})
```

## 5. 에러 코드 규칙

### 에러 코드 범위
- 각 모듈별로 100번대 단위로 할당
- 1000부터 시작하여 100씩 증가: 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700...
- 예: User(1000), Auth(1100), Search/Product(1200), Artist(1300), Cart(1400), Player/File(1500), Subscribe/Coupon(1600), Question(1700)

### 공통 에러 코드 패턴
- 1x00: 생성 실패 (CREATE_ERROR)
- 1x01: 목록 조회 실패 (FIND_ERROR) 
- 1x02: 찾을 수 없음 (NOT_FOUND_ERROR)
- 1x03: 상세 조회 실패 (DETAIL_ERROR)
- 1x04: 수정 실패 (UPDATE_ERROR)
- 1x05: 삭제 실패 (DELETE_ERROR)

### Error 파일 생성 규칙
1. **파일명**: `{module}.error.ts`
2. **상수명**: `{MODULE_NAME}_{ACTION}_ERROR` (대문자, 언더스코어)
3. **구조**:
   ```typescript
   export const MODULE_ACTION_ERROR = {
     title: "Module action error",
     code: 1x0x,
     status: 400 | 404,
     detail: "한국어 에러 메시지",
   };
   ```
4. **Service에서 사용**: 
   - 기본: `throw new BadRequestException(MODULE_ACTION_ERROR);`
   - **에러 메시지 포함**: `throw new BadRequestException({ ...MODULE_ACTION_ERROR, detail: error.message });`

## 6. 명명 규칙

### 파일명
- DTO: `{module}.{action}.dto.ts` / `{module}.{type}.response.dto.ts`
- Controller: `{module}.public.controller.ts`
- Service: `{module}.service.ts`
- Module: `{module}.module.ts`

### 클래스명
- DTO: `{ModuleName}{Action}Dto` / `{ModuleName}{Type}ResponseDto`
- Controller: `{ModuleName}PublicController`
- Service: `{ModuleName}Service`
- Module: `{ModuleName}Module`

## 7. 체크리스트

- [ ] Prisma 스키마 추가
- [ ] shared-types request/response 스키마 생성
- [ ] shared-types index 파일 생성
- [ ] shared-types 메인 export 추가
- [ ] shared-types tsup.config.ts 업데이트
- [ ] shared-types 빌드
- [ ] **Error 파일 생성 ({module}.error.ts)**
- [ ] Request DTO 생성
- [ ] Response DTO 생성
- [ ] Service 생성 (Error 상수 import 및 사용)
- [ ] Controller 생성 (*.public.controller.ts)
- [ ] Module 생성
- [ ] Router에 Module 등록
- [ ] API 테스트


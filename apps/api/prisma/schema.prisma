generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                     BigInt                @id @default(autoincrement())
  email                  String                @db.VarChar(255)
  name                   String?                @db.VarChar(100)
  password               String?               @db.VarChar(255)
  phoneNumber            String?               @map("phone_number") @db.VarChar(20)
  gender                 String?               @db.Char(1)
  birthDate              DateTime?              @map("birth_date") @db.Timestamp(0)
  profileUrl             String?               @map("profile_url") @db.VarChar(255)
  country                String?                @db.VarChar(4)
  region                 String?                @db.VarChar(100)
  accessToken            String?               @map("access_token") @db.VarChar(255)
  refreshToken           String?               @map("refresh_token") @db.VarChar(255)
  agreedTermsAt          DateTime?              @map("agreed_terms_at") @db.Timestamp(0)
  agreedPrivacyPolicyAt  DateTime?              @map("agreed_privacy_policy_at") @db.Timestamp(0)
  agreedEmailAt          DateTime?             @map("agreed_email_at") @db.Timestamp(0)
  lastLoginAt            DateTime?             @map("last_login_at") @db.Timestamp(0)
  subscribedAt           DateTime?             @map("subscribed_at") @db.Timestamp(0)
  createdAt              DateTime?             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt              DateTime?             @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt              DateTime?             @map("deleted_at") @db.Timestamp(0)
  musicType              String?               @db.VarChar(10)
  artist                 Artist[]
  file                   File[]
  cart                   Cart[]
  order                  Order[]
  payments               Payments[]
  userSocialAccount      UserSocialAccount[]

  @@map("user")
}

model Artist {
  id                         BigInt    @id @default(autoincrement())
  userId                     BigInt    @unique @map("user_id")
  stageName                  String?   @map("stage_name") @db.VarChar(30)
  slug                       String?   @db.VarChar(20)
  description                String?   @db.Text
  profileImageUrl            String?   @map("profile_image_url") @db.VarChar(255)
  instagramAccount           String?   @map("instagram_account") @db.VarChar(30)
  youtubeAccount             String?   @map("youtube_account") @db.VarChar(30)
  tiktokAccount              String?   @map("tiktok_account") @db.VarChar(30)
  soundcloudAccount          String?   @map("soundcloud_account") @db.VarChar(30)
  kakaoAccount               String?   @map("kakao_account") @db.VarChar(30)
  lineAccount                String?   @map("line_account") @db.VarChar(30)
  discordAccount             String?   @map("discord_account") @db.VarChar(30)
  country                    String?   @db.VarChar(3)
  city                       String?   @db.VarChar(100)
  createdAt                  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                  DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                  DateTime? @map("deleted_at") @db.Timestamp(0)
  user                       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_artist_1")
  productSellerIdToArtist    Product[] @relation("product_seller_idToartist")

  @@index([userId], map: "FK_user_TO_artist_1")
  @@map("artist")
}

model Cart {
  id        BigInt    @id @default(autoincrement())
  productId BigInt    @map("product_id")
  userId    BigInt    @map("user_id")
  quantity  Int?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_1")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_3")

  @@index([productId], map: "FK_product_TO_cart_1")
  @@index([userId], map: "FK_product_TO_cart_3")
  @@map("cart")
}

model Order {
  id          BigInt        @id @default(autoincrement())
  buyerId     BigInt        @map("buyer_id")
  orderNumber String?       @map("order_number") @db.VarChar(100)
  totalPrice  Int?          @map("total_price")
  status      String?       @db.VarChar(20)
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamp(0)
  user        User          @relation(fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_order_1")
  orderDetail OrderDetail[]
  payments    Payments[]

  @@index([buyerId], map: "FK_user_TO_order_1")
  @@map("order")
}

model OrderDetail {
  id        BigInt    @id @default(autoincrement())
  orderId   BigInt    @map("order_id")
  quantity  Int?      @db.TinyInt
  unitPrice Int?      @map("unit_price")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_order_detail_1")

  @@index([orderId], map: "FK_order_TO_order_detail_1")
  @@map("order_detail")
}

model Payments {
  id            BigInt    @id @default(autoincrement())
  orderId       BigInt    @map("order_id")
  userId        BigInt    @map("user_id")
  paymentMethod String?   @map("payment_method") @db.VarChar(50)
  paymentKey    String?   @map("payment_key") @db.VarChar(255)
  amount        Int?
  status        String?   @db.VarChar(50)
  paidAt        DateTime? @map("paid_at") @db.Timestamp(0)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp(0)
  order         Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_payments_1")
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_payments_2")

  @@index([orderId], map: "FK_order_TO_payments_1")
  @@index([userId], map: "FK_order_TO_payments_2")
  @@map("payments")
}

model Product {
  id                        BigInt    @id @default(autoincrement())
  sellerId                  BigInt?    @map("seller_id") 
  productName               String?   @map("product_name") @db.VarChar(255)
  description               String?   @db.Text
  price                     Int?
  imageUrl                  String?   @map("image_url") @db.VarChar(255)
  type                      String?   @db.VarChar(10)
  genre                     String?   @db.VarChar(100)
  tags                      Json?
  bpm                       Int?
  tonality                  String?   @db.VarChar(10)
  licenseType               String?   @map("license_type") @db.VarChar(10)
  licensePrice              Int?      @map("license_price")
  currency                  String?   @db.VarChar(10)
  coverImageUrl             String?   @map("cover_image_url") @db.VarChar(255)
  audioFileUrl              String?   @map("audio_file_url") @db.VarChar(255)
  zipFileUrl                String?   @map("zip_file_url") @db.VarChar(255)
  isFreeDownload            Int?      @map("is_free_download") @db.TinyInt
  isPublic                  Int?      @map("is_public") @db.TinyInt
  createdAt                 DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                 DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                 DateTime? @map("deleted_at") @db.Timestamp(0)
  cart                      Cart[]
  artistSellerIdToArtist    Artist?    @relation("product_seller_idToartist", fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_artist_TO_product_1")

  @@index([sellerId], map: "FK_artist_TO_product_1")
  @@map("product")
}

model UserSocialAccount {
  id             BigInt    @id @default(autoincrement())
  userId         BigInt    @map("user_id")
  provider       String    @db.VarChar(20)
  providerUserId BigInt    @map("provider_user_id")
  email          String?   @db.VarChar(255)
  profileImage   String?   @map("profile_image") @db.VarChar(255)
  name           String?   @db.VarChar(100)
  accessToken    String    @map("access_token") @db.VarChar(255)
  refreshToken   String    @map("refresh_token") @db.VarChar(255)
  connectedAt    DateTime  @map("connected_at") @db.Timestamp(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(0)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_user_social_account_1")

  @@index([userId], map: "FK_user_TO_user_social_account_1")
  @@map("user_social_account")
}

model File {
  id          BigInt    @id @default(autoincrement())
  targetTable String?   @map("target_table") @db.VarChar(20)
  targetId    BigInt?   @map("target_id")
  type        String?   @db.VarChar(20)
  url         String?   @db.VarChar(255)
  originName  String    @map("origin_name") @db.VarChar(100)
  mimeType    String?   @map("mime_type") @db.VarChar(50)
  size        BigInt    @default(0) @db.UnsignedBigInt
  uploaderId  BigInt?   @map("uploader_id")
  isEnabled   Int       @map("is_enabled") @db.TinyInt
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)
  user        User?     @relation(fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_uploader")

  @@index([uploaderId], map: "idx_file_uploader")
  @@map("file")
}



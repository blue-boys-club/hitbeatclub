generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                     BigInt                @id @default(autoincrement())
  email                  String                @db.VarChar(255)
  name                   String?                @db.VarChar(100)
  stageName              String?                @db.VarChar(30)
  password               String?               @db.VarChar(255)
  phoneNumber            String?               @map("phone_number") @db.VarChar(20)
  gender                 String?               @db.Char(1)
  birthDate              DateTime?              @map("birth_date") @db.Timestamp(0)
  profileUrl             String?               @map("profile_url") @db.VarChar(255)
  country                String?                @db.VarChar(4)
  region                 String?                @db.VarChar(100)
  accessToken            String?               @map("access_token") @db.VarChar(255)
  refreshToken           String?               @map("refresh_token") @db.VarChar(255)
  agreedTermsAt          DateTime?              @map("agreed_terms_at") @db.Timestamp(0)
  agreedPrivacyPolicyAt  DateTime?              @map("agreed_privacy_policy_at") @db.Timestamp(0)
  agreedEmailAt          DateTime?             @map("agreed_email_at") @db.Timestamp(0)
  lastLoginAt            DateTime?             @map("last_login_at") @db.Timestamp(0)
  subscribedAt           DateTime?             @map("subscribed_at") @db.Timestamp(0)
  createdAt              DateTime?             @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt              DateTime?             @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedReason          String?               @map("deleted_reason") @db.VarChar(255)
  deletedAt              DateTime?             @map("deleted_at") @db.Timestamp(0)
  musicType              String?               @db.VarChar(10)
  artist                 Artist[]
  file                   File[]
  cart                   Cart[]
  order                  Order[]
  payments               Payments[]
  userSocialAccount      UserSocialAccount[]
  tag                    Tag[]
  accountToken           AccountToken[]
  productLike            ProductLike[]
  userArtistFollow       UserArtistFollow[]
  subscribe              Subscribe[]

  @@map("user")
}

model Artist {
  id                         BigInt    @id @default(autoincrement())
  userId                     BigInt    @map("user_id")
  stageName                  String?   @map("stage_name") @db.VarChar(30)
  slug                       String?   @db.VarChar(20)
  description                String?   @db.Text
  isVerified                 Int?      @map("is_verified") @db.TinyInt 
  profileImageUrl            String?   @map("profile_image_url") @db.VarChar(255)
  instagramAccount           String?   @map("instagram_account") @db.VarChar(30)
  youtubeAccount             String?   @map("youtube_account") @db.VarChar(30)
  tiktokAccount              String?   @map("tiktok_account") @db.VarChar(30)
  soundcloudAccount          String?   @map("soundcloud_account") @db.VarChar(30)
  etcAccounts                Json?     @map("etc_accounts")
  kakaoAccount               String?   @map("kakao_account") @db.VarChar(30)
  lineAccount                String?   @map("line_account") @db.VarChar(30)
  discordAccount             String?   @map("discord_account") @db.VarChar(30)
  country                    String?   @db.VarChar(3)
  city                       String?   @db.VarChar(100)
  createdAt                  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                  DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                  DateTime? @map("deleted_at") @db.Timestamp(0)
  user                       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_artist_1")
  productSellerIdToArtist    Product[] @relation("product_seller_idToartist")
  settlement Settlement[]
  userArtistFollow           UserArtistFollow[]

  @@index([userId], map: "FK_user_TO_artist_1")
  @@map("artist")
}

model Cart {
  id        BigInt    @id @default(autoincrement())
  productId BigInt    @map("product_id")
  licenseId BigInt    @map("license_id")
  userId    BigInt    @map("user_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_1")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_3")
  license   License   @relation(fields: [licenseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_cart_2")

  @@index([productId], map: "FK_product_TO_cart_1")
  @@index([userId], map: "FK_product_TO_cart_3")
  @@index([licenseId], map: "FK_product_TO_cart_2")
  @@map("cart")
}

model Order {
  id          BigInt        @id @default(autoincrement())
  buyerId     BigInt        @map("buyer_id")
  orderNumber String?       @map("order_number") @db.VarChar(100)
  totalPrice  Int?          @map("total_price")
  status      String?       @db.VarChar(20)
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamp(0)
  user        User          @relation(fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_order_1")
  orderDetail OrderDetail[]
  payments    Payments[]

  @@index([buyerId], map: "FK_user_TO_order_1")
  @@map("order")
}

model OrderDetail {
  id        BigInt    @id @default(autoincrement())
  orderId   BigInt    @map("order_id")
  quantity  Int?      @db.TinyInt
  unitPrice Int?      @map("unit_price")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_order_detail_1")

  @@index([orderId], map: "FK_order_TO_order_detail_1")
  @@map("order_detail")
}

model Payments {
  id            BigInt    @id @default(autoincrement())
  orderId       BigInt    @map("order_id")
  userId        BigInt    @map("user_id")
  paymentMethod String?   @map("payment_method") @db.VarChar(50)
  paymentKey    String?   @map("payment_key") @db.VarChar(255)
  amount        Int?
  status        String?   @db.VarChar(50)
  paidAt        DateTime? @map("paid_at") @db.Timestamp(0)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp(0)
  order         Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_payments_1")
  user          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_order_TO_payments_2")

  @@index([orderId], map: "FK_order_TO_payments_1")
  @@index([userId], map: "FK_order_TO_payments_2")
  @@map("payments")
}

model Product {
  id                        BigInt    @id @default(autoincrement())
  sellerId                  BigInt?    @map("seller_id") 
  productName               String?   @map("product_name") @db.VarChar(255)
  description               String?   @db.Text
  price                     Int?
  imageUrl                  String?   @map("image_url") @db.VarChar(255)
  category                  String?   @db.VarChar(10)
  minBpm                    Int?      @db.SmallInt
  maxBpm                    Int?      @db.SmallInt
  musicKey                  String?   @db.VarChar(10)
  scaleType                 String?   @db.VarChar(10)
  currency                  String?   @db.VarChar(10)
  isFreeDownload            Int?      @map("is_free_download") @db.TinyInt
  isPublic                  Int?      @map("is_public") @db.TinyInt
  createdAt                 DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt                 DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt                 DateTime? @map("deleted_at") @db.Timestamp(0)
  cart                      Cart[]
  artistSellerIdToArtist    Artist?          @relation("product_seller_idToartist", fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_artist_TO_product_1")
  productLicense            ProductLicense[]
  productGenre              ProductGenre[]
  productTag                ProductTag[]
  productLike               ProductLike[]

  @@index([sellerId], map: "FK_artist_TO_product_1")
  @@map("product")
}

model UserSocialAccount {
  id             BigInt    @id @default(autoincrement())
  userId         BigInt    @map("user_id")
  provider       String    @db.VarChar(20)
  providerUserId BigInt    @map("provider_user_id")
  email          String?   @db.VarChar(255)
  profileImage   String?   @map("profile_image") @db.VarChar(255)
  name           String?   @db.VarChar(100)
  accessToken    String    @map("access_token") @db.VarChar(255)
  refreshToken   String    @map("refresh_token") @db.VarChar(255)
  connectedAt    DateTime  @map("connected_at") @db.Timestamp(0)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(0)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_user_social_account_1")

  @@index([userId], map: "FK_user_TO_user_social_account_1")
  @@map("user_social_account")
}

model File {
  id          BigInt    @id @default(autoincrement())
  targetTable String?   @map("target_table") @db.VarChar(20)
  targetId    BigInt?   @map("target_id")
  type        String?   @db.VarChar(20)
  url         String?   @db.VarChar(255)
  originName  String    @map("origin_name") @db.VarChar(100)
  mimeType    String?   @map("mime_type") @db.VarChar(50)
  size        BigInt    @default(0) @db.UnsignedBigInt
  uploaderId  BigInt?   @map("uploader_id")
  isEnabled   Int       @map("is_enabled") @db.TinyInt
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(0)
  user        User?     @relation(fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_file_uploader")

  @@index([uploaderId], map: "idx_file_uploader")
  @@index([targetId], map: "idx_file_target")
  @@map("file")
}

model License {
  id             BigInt           @id @default(autoincrement())
  type           String?           @db.VarChar(100)
  label          String?           @db.VarChar(100)
  createdAt      DateTime?        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime?        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp(0)
  productLicense ProductLicense[]
  cart           Cart[]
  
  @@map("license")
}

model ProductLicense {
  productId BigInt    @map("product_id")
  licenseId BigInt    @map("license_id")
  price     Int?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_license_1")
  license   License   @relation(fields: [licenseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_license_TO_product_license_1")

  @@id([productId, licenseId])
  @@index([productId], map: "FK_product_TO_product_license_1")
  @@index([licenseId], map: "FK_license_TO_product_license_1")
  @@map("product_license")
}

model Genre {
  id           BigInt         @id @default(autoincrement())
  name         String         @db.VarChar(100)
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime?      @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt    DateTime?      @map("deleted_at") @db.Timestamp(0)
  productGenre ProductGenre[]

  @@map("genre")
}

model ProductGenre {
  productId BigInt    @map("product_id")
  genreId   BigInt    @map("genre_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_genre_1")
  genre     Genre     @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_genre_TO_product_genre_1")

  @@unique([productId, genreId])
  @@index([productId], map: "FK_product_TO_product_genre_1")
  @@index([genreId], map: "FK_genre_TO_product_genre_1")
  @@map("product_genre")
}

model Tag {
  id         BigInt       @id @default(autoincrement())
  name       String       @db.VarChar(100)
  userId     BigInt?       @map("user_id")
  createdAt  DateTime?    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime?    @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt  DateTime?    @map("deleted_at") @db.Timestamp(0)
  productTag ProductTag[]
  user       User?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_TO_tag_1")

  @@index([userId], map: "FK_user_TO_tag_1")
  @@map("tag")
}

model ProductTag {
  productId BigInt    @map("product_id")
  tagId     BigInt    @map("tag_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_product_TO_product_tag_1")
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_tag_TO_product_tag_1")

  @@unique([productId, tagId])
  @@index([productId], map: "FK_product_TO_product_tag_1")
  @@index([tagId], map: "FK_tag_TO_product_tag_1")
  @@map("product_tag")
}

model ProductLike {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  productId BigInt   @map("product_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0) 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FK_user_TO_product_like_1")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, map: "FK_product_TO_product_like_1")

  @@unique([userId, productId, deletedAt], map: "ux_product_like__user_product")
  @@index([userId], map: "FK_user_TO_product_like_1")
  @@index([productId], map: "FK_product_TO_product_like_1")
  @@map("product_like")
}

enum SettlementType {
  BANK_ACCOUNT
  PAYPAL
}

model Settlement {
  id BigInt @id @default(autoincrement())
  artistId BigInt @unique @map("artist_id")

  type SettlementType
  // 입금주 명 - bankAccount, paypal 이랑 같이 사용
  accountHolder String @map("account_name") @db.VarChar(100)

  accountNumber String? @map("account_number") @db.VarChar(100)
  accountBank String? @map("account_bank") @db.VarChar(100)
  accountVerifiedAt DateTime? @map("account_verified_at") @db.Timestamp(0)

  paypalAccount String? @map("paypal_account") @db.VarChar(100)

  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)

  artist Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_artist_TO_settlement_1")

  @@index([artistId], map: "FK_artist_TO_settlement_1")
  @@map("settlement")
}

enum TokenPurpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
  PHONE_VERIFICATION
  PHONE_CHANGE
}

enum FollowStatus {
  active
  blocked
}

enum SubscriptionPlan {
  MONTH
  YEAR
}

enum ProductType {
  MEMBERSHIP
}

model AccountToken {
  id          BigInt   @id @default(autoincrement())
  token       String   @db.Char(64) @unique      // SHA-256 → 64byte 등
  purpose     TokenPurpose

  userId      BigInt   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  active      Boolean?  @default(true)            // "현재 유효 토큰인가?"
  consumedAt  DateTime? @map("consumed_at")      // 검증 직후 기록
  expiresAt   DateTime  @map("expires_at")

  deletedAt   DateTime? @map("deleted_at")       // 소프트 삭제 시각
  createdAt   DateTime  @default(now()) @map("created_at")

  @@unique([userId, purpose, active])            // active=true일 때만 unique (null은 무시됨)
  @@index([expiresAt])
  @@index([deletedAt])
  @@map("account_token")
}

model UserArtistFollow {
  userId    BigInt       @map("user_id")
  artistId  BigInt       @map("artist_id")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime     @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime?    @map("deleted_at") @db.Timestamp(0)
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uaf_user")
  artist    Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_uaf_artist")

  @@id([userId, artistId])
  @@index([userId], map: "idx_uaf_user")
  @@index([artistId], map: "idx_uaf_artist")
  @@map("user_artist_follow")
}

model Subscribe {
  id               BigInt          @id @default(autoincrement())
  userId           BigInt          @map("user_id")
  subscriptionPlan SubscriptionPlan @map("subscription_plan")
  productType      ProductType     @map("product_type")
  price           Int             @db.Int
  nextPaymentDate  DateTime?       @map("next_payment_date") @db.Timestamp(0)
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt        DateTime?       @map("deleted_at") @db.Timestamp(0)
  
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_user_TO_subscribe_1")

  @@index([userId], map: "FK_user_TO_subscribe_1")
  @@map("subscribe")
}

model SubscribeProduct {
  id            BigInt          @id @default(autoincrement())
  type          SubscriptionPlan @map("type")
  price Int             @map("original_price") @db.Int
  discountPrice Int?            @map("discount_price") @db.Int
  discountRate  Int?            @map("discount_rate") @db.TinyInt
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp(0)

  @@map("subscribe_product")
}